// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, user_id, post_text)
VALUES ($1, $2, $2, $3, $4)
RETURNING id, created_at, updated_at, user_id, post_text
`

type CreatePostParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UserID    uuid.UUID
	PostText  string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UserID,
		arg.PostText,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.PostText,
	)
	return i, err
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT id, created_at, updated_at, user_id, post_text FROM posts
WHERE user_id IN (
	SELECT user_following_id FROM follows
    WHERE follows.user_id = $1
)
ORDER BY created_at DESC
`

func (q *Queries) GetPostsForUser(ctx context.Context, userID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.PostText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsFromUsers = `-- name: GetPostsFromUsers :many
SELECT id, created_at, updated_at, user_id, post_text FROM posts
WHERE user_id=ANY($1::UUID[])
ORDER BY created_at DESC
`

func (q *Queries) GetPostsFromUsers(ctx context.Context, dollar_1 []uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsFromUsers, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.PostText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
