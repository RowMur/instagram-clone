// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFollow = `-- name: CreateFollow :one
INSERT INTO follows (user_id, user_following_id, created_at)
VALUES ($1, $2, $3)
RETURNING user_id, user_following_id, created_at
`

type CreateFollowParams struct {
	UserID          uuid.UUID
	UserFollowingID uuid.UUID
	CreatedAt       time.Time
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, createFollow, arg.UserID, arg.UserFollowingID, arg.CreatedAt)
	var i Follow
	err := row.Scan(&i.UserID, &i.UserFollowingID, &i.CreatedAt)
	return i, err
}

const getFollowersByUser = `-- name: GetFollowersByUser :many
SELECT user_id, user_following_id, created_at FROM follows WHERE user_following_id=$1
`

func (q *Queries) GetFollowersByUser(ctx context.Context, userFollowingID uuid.UUID) ([]Follow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowersByUser, userFollowingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follow
	for rows.Next() {
		var i Follow
		if err := rows.Scan(&i.UserID, &i.UserFollowingID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowsByUser = `-- name: GetFollowsByUser :many
SELECT user_id, user_following_id, created_at FROM follows WHERE user_id=$1
`

func (q *Queries) GetFollowsByUser(ctx context.Context, userID uuid.UUID) ([]Follow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follow
	for rows.Next() {
		var i Follow
		if err := rows.Scan(&i.UserID, &i.UserFollowingID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollow = `-- name: Unfollow :exec
DELETE FROM follows WHERE user_id=$1 AND user_following_id=$2
`

type UnfollowParams struct {
	UserID          uuid.UUID
	UserFollowingID uuid.UUID
}

func (q *Queries) Unfollow(ctx context.Context, arg UnfollowParams) error {
	_, err := q.db.ExecContext(ctx, unfollow, arg.UserID, arg.UserFollowingID)
	return err
}
